// Compiled shader for PC, Mac & Linux Standalone

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "My Shader/NormalMapWorldSpace" {
Properties {
 _Color ("Color Tint", Color) = (1.000000,1.000000,1.000000,1.000000)
 _Specular ("Specular", Color) = (1.000000,1.000000,1.000000,1.000000)
 _Gloss ("Gloss", Range(8.000000,256.000000)) = 20.000000
 _MainTex ("Main Tex", 2D) = "white" { }
 _BumpMap ("Bump Map", 2D) = "bump" { }
 _BumpScale ("Bump Scale", Float) = 1.000000
}
SubShader { 


 // Stats for Vertex shader:
 //        d3d11: 26 math
 // Stats for Fragment shader:
 //        d3d11: 37 math, 2 texture
 Pass {
  Tags { "LIGHTMODE"="FORWARDBASE" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "d3d11":
// Stats: 26 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord3"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 112
  Vector4 _BumpMap_ST at 128
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v1.xyz
      dcl_input v2.xyzw
      dcl_input v3.xyzw
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_output o4.xyzw
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad r0.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r2.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r2.xyzw, cb2[17].xyzw, r1.xxxx, r2.xyzw
   7: mad r2.xyzw, cb2[19].xyzw, r1.zzzz, r2.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r2.xyzw
   9: mad o1.xy, v3.xyxx, cb0[7].xyxx, cb0[7].zwzz
  10: mad o1.zw, v3.zzzw, cb0[8].xxxy, cb0[8].zzzw
  11: mov o2.w, r0.x
  12: dp3 r1.y, v1.xyzx, cb1[4].xyzx
  13: dp3 r1.z, v1.xyzx, cb1[5].xyzx
  14: dp3 r1.x, v1.xyzx, cb1[6].xyzx
  15: dp3 r0.x, r1.xyzx, r1.xyzx
  16: rsq r0.x, r0.x
  17: mul r1.xyz, r0.xxxx, r1.xyzx
  18: mul r2.xyz, v2.yyyy, cb1[1].yzxy
  19: mad r2.xyz, cb1[0].yzxy, v2.xxxx, r2.xyzx
  20: mad r2.xyz, cb1[2].yzxy, v2.zzzz, r2.xyzx
  21: dp3 r0.x, r2.xyzx, r2.xyzx
  22: rsq r0.x, r0.x
  23: mul r2.xyz, r0.xxxx, r2.xyzx
  24: mul r3.xyz, r1.xyzx, r2.xyzx
  25: mad r3.xyz, r1.zxyz, r2.yzxy, -r3.xyzx
  26: mul r3.xyz, r3.xyzx, v2.wwww
  27: mov o2.y, r3.x
  28: mov o2.x, r2.z
  29: mov o2.z, r1.y
  30: mov o3.x, r2.x
  31: mov o4.x, r2.y
  32: mov o3.z, r1.z
  33: mov o4.z, r1.x
  34: mov o3.w, r0.y
  35: mov o4.w, r0.z
  36: mov o3.y, r3.y
  37: mov o4.y, r3.z
  38: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 37 math, 3 temp registers, 2 textures
Set 2D Texture "_BumpMap" to slot 0 sampler slot 1
Set 2D Texture "_MainTex" to slot 1 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _LightColor0 at 0
  Vector4 _Color at 64
  Vector4 _Specular at 80
  Float _Gloss at 96
  Float _BumpScale at 144
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityLighting" (768 bytes) on slot 2 {
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Vector4 glstate_lightmodel_ambient at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[5], immediateIndexed
      dcl_constantbuffer CB2[1], immediateIndexed
      dcl_constantbuffer CB3[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xyzw
      dcl_input_ps linear v3.xyzw
      dcl_input_ps linear v4.xyzw
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample r0.xyzw, v1.zwzz, t0.xyzw, s1
   1: mul r0.x, r0.w, r0.x
   2: mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
   3: mul r0.xy, r0.xyxx, cb0[9].xxxx
   4: dp2 r0.w, r0.xyxx, r0.xyxx
   5: min r0.w, r0.w, l(1.000000)
   6: add r0.w, -r0.w, l(1.000000)
   7: sqrt r0.z, r0.w
   8: dp3 r1.x, v2.xyzx, r0.xyzx
   9: dp3 r1.y, v3.xyzx, r0.xyzx
  10: dp3 r1.z, v4.xyzx, r0.xyzx
  11: dp3 r0.x, r1.xyzx, r1.xyzx
  12: rsq r0.x, r0.x
  13: mul r0.xyz, r0.xxxx, r1.xyzx
  14: mov r1.x, v2.w
  15: mov r1.y, v3.w
  16: mov r1.z, v4.w
  17: mad r2.xyz, -r1.xyzx, cb2[0].wwww, cb2[0].xyzx
  18: add r1.xyz, -r1.xyzx, cb1[4].xyzx
  19: dp3 r0.w, r2.xyzx, r2.xyzx
  20: rsq r0.w, r0.w
  21: mul r2.xyz, r0.wwww, r2.xyzx
  22: dp3 r0.w, r1.xyzx, r1.xyzx
  23: rsq r0.w, r0.w
  24: mad r1.xyz, r1.xyzx, r0.wwww, r2.xyzx
  25: dp3 r0.w, r0.xyzx, r2.xyzx
  26: dp3 r1.w, r1.xyzx, r1.xyzx
  27: rsq r1.w, r1.w
  28: mul r1.xyz, r1.wwww, r1.xyzx
  29: dp3 r0.x, r0.xyzx, r1.xyzx
  30: max r0.xw, r0.xxxw, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r0.x, r0.x
  32: mul r0.x, r0.x, cb0[6].x
  33: exp r0.x, r0.x
  34: sample r1.xyzw, v1.xyxx, t1.xyzw, s0
  35: mul r1.xyz, r1.xyzx, cb0[4].xyzx
  36: mul r2.xyz, r1.xyzx, cb3[0].xyzx
  37: mul r1.xyz, r1.xyzx, cb0[0].xyzx
  38: add r2.xyz, r2.xyzx, r2.xyzx
  39: mad r0.yzw, r1.xxyz, r0.wwww, r2.xxyz
  40: mul r1.xyz, cb0[0].xyzx, cb0[5].xyzx
  41: mad o0.xyz, r1.xyzx, r0.xxxx, r0.yzwy
  42: mov o0.w, l(1.000000)
  43: ret 
// Approximately 0 instruction slots used


 }
}
Fallback "Specular"
}